rankprofile[].name "default"
rankprofile[].fef.property[].name "vespa.type.query.b_out"
rankprofile[].fef.property[].value "tensor(out[1])"
rankprofile[].fef.property[].name "vespa.type.query.W_out"
rankprofile[].fef.property[].value "tensor(out[9])"
rankprofile[].fef.property[].name "vespa.type.query.b_0"
rankprofile[].fef.property[].value "tensor(hidden[9])"
rankprofile[].fef.property[].name "vespa.type.query.b_1"
rankprofile[].fef.property[].value "tensor(out[9])"
rankprofile[].fef.property[].name "vespa.type.query.W_1"
rankprofile[].fef.property[].value "tensor(hidden[9],out[9])"
rankprofile[].fef.property[].name "vespa.type.query.W_0"
rankprofile[].fef.property[].value "tensor(hidden[9],x[9])"
rankprofile[].name "unranked"
rankprofile[].fef.property[].name "vespa.rank.firstphase"
rankprofile[].fef.property[].value "value(0)"
rankprofile[].fef.property[].name "vespa.hitcollector.heapsize"
rankprofile[].fef.property[].value "0"
rankprofile[].fef.property[].name "vespa.hitcollector.arraysize"
rankprofile[].fef.property[].value "0"
rankprofile[].fef.property[].name "vespa.dump.ignoredefaultfeatures"
rankprofile[].fef.property[].value "true"
rankprofile[].fef.property[].name "vespa.type.query.b_out"
rankprofile[].fef.property[].value "tensor(out[1])"
rankprofile[].fef.property[].name "vespa.type.query.W_out"
rankprofile[].fef.property[].value "tensor(out[9])"
rankprofile[].fef.property[].name "vespa.type.query.b_0"
rankprofile[].fef.property[].value "tensor(hidden[9])"
rankprofile[].fef.property[].name "vespa.type.query.b_1"
rankprofile[].fef.property[].value "tensor(out[9])"
rankprofile[].fef.property[].name "vespa.type.query.W_1"
rankprofile[].fef.property[].value "tensor(hidden[9],out[9])"
rankprofile[].fef.property[].name "vespa.type.query.W_0"
rankprofile[].fef.property[].value "tensor(hidden[9],x[9])"
rankprofile[].name "defaultRankProfile"
rankprofile[].fef.property[].name "rankingExpression(log10_1p).rankingScript"
rankprofile[].fef.property[].value "log10(x + 1)"
rankprofile[].fef.property[].name "rankingExpression(textScoreToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(normalizedTextScore)) == 1, 0, attribute(normalizedTextScore))"
rankprofile[].fef.property[].name "rankingExpression(ericScoreToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(ericScore)) == 1, 0, attribute(ericScore))"
rankprofile[].fef.property[].name "rankingExpression(replyCountToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(replyCount)) == 1, 0, if (attribute(replyCount) < 0, 0, attribute(replyCount)))"
rankprofile[].fef.property[].name "rankingExpression(uniqueReplyCountToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(uniqueReplyAuthorCount)) == 1, 0, if (attribute(uniqueReplyAuthorCount) < 0, 0, attribute(uniqueReplyAuthorCount)))"
rankprofile[].fef.property[].name "rankingExpression(upVoteCountToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(upVoteCount)) == 1, 0, if (attribute(upVoteCount) < 0, 0, attribute(upVoteCount)))"
rankprofile[].fef.property[].name "rankingExpression(downVoteCountToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(downVoteCount)) == 1, 0, if (attribute(downVoteCount) < 0, 0, attribute(downVoteCount)))"
rankprofile[].fef.property[].name "rankingExpression(abuseVoteCountToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(abuseVoteCount)) == 1, 0, if (attribute(abuseVoteCount) < 0, 0, attribute(abuseVoteCount)))"
rankprofile[].fef.property[].name "rankingExpression(totalPositiveReactions).rankingScript"
rankprofile[].fef.property[].value "rankingExpression(uniqueReplyCountToUse) + query(voteToReplyRatio) * (rankingExpression(upVoteCountToUse) - rankingExpression(downVoteCountToUse)) - rankingExpression(abuseVoteCountToUse)"
rankprofile[].fef.property[].name "rankingExpression(totalvote).rankingScript"
rankprofile[].fef.property[].value "query(reportabuseweight) * rankingExpression(abuseVoteCountToUse) + rankingExpression(downVoteCountToUse) + query(replyweight) * rankingExpression(uniqueReplyCountToUse) + rankingExpression(upVoteCountToUse)"
rankprofile[].fef.property[].name "rankingExpression(phat).rankingScript"
rankprofile[].fef.property[].value "if (rankingExpression(totalvote) == 0, 0, (query(replyweight) * rankingExpression(uniqueReplyCountToUse) + rankingExpression(upVoteCountToUse)) / rankingExpression(totalvote))"
rankprofile[].fef.property[].name "rankingExpression(newCommunityScoreToUse).rankingScript"
rankprofile[].fef.property[].value "if (rankingExpression(totalPositiveReactions) > 0, log10(rankingExpression(totalPositiveReactions)), 0)"
rankprofile[].fef.property[].name "rankingExpression(hsScoreToUse).rankingScript"
rankprofile[].fef.property[].value "attribute(hsScore)"
rankprofile[].fef.property[].name "rankingExpression(toxicityScoreToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(toxicity)) == 1, 0.6, attribute(toxicity))"
rankprofile[].fef.property[].name "rankingExpression(relevanceScoreToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(relevance)) == 1, 0.254, attribute(relevance))"
rankprofile[].fef.property[].name "rankingExpression(freshnessToUse).rankingScript"
rankprofile[].fef.property[].value "if (freshness(createdAt).logscale < 0.01, 0.01, freshness(createdAt).logscale)"
rankprofile[].fef.property[].name "rankingExpression(rankedAt).rankingScript"
rankprofile[].fef.property[].value "now"
rankprofile[].fef.property[].name "rankingExpression(createdAtToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(createdAt)) == 1, rankingExpression(rankedAt), attribute(createdAt))"
rankprofile[].fef.property[].name "rankingExpression(lastActivityAtToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(lastActivityAt)) == 1, attribute(createdAt), attribute(lastActivityAt))"
rankprofile[].fef.property[].name "rankingExpression(markedAsAbuseAtToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(markedAsAbuseAt)) == 1, 9.223372036854776E18, attribute(markedAsAbuseAt))"
rankprofile[].fef.property[].name "rankingExpression(timeDecayToUse).rankingScript"
rankprofile[].fef.property[].value "pow(2,0 - ((rankingExpression(rankedAt) - rankingExpression(createdAtToUse)) / query(decay)))"
rankprofile[].fef.property[].name "rankingExpression(commentOverallScore).rankingScript"
rankprofile[].fef.property[].value "query(textweight) * rankingExpression(textScoreToUse) + query(communityweight) * rankingExpression(newCommunityScoreToUse)"
rankprofile[].fef.property[].name "rankingExpression(pinScore).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(pinned)) == 1, 0, query(pinweight) * attribute(pinned))"
rankprofile[].fef.property[].name "rankingExpression(freshnessRank).rankingScript"
rankprofile[].fef.property[].value "nativeRank + freshness(createdAt)"
rankprofile[].fef.property[].name "vespa.rank.firstphase"
rankprofile[].fef.property[].value "nativeRank"
rankprofile[].fef.property[].name "vespa.type.query.b_out"
rankprofile[].fef.property[].value "tensor(out[1])"
rankprofile[].fef.property[].name "vespa.type.query.W_out"
rankprofile[].fef.property[].value "tensor(out[9])"
rankprofile[].fef.property[].name "vespa.type.query.b_0"
rankprofile[].fef.property[].value "tensor(hidden[9])"
rankprofile[].fef.property[].name "vespa.type.query.b_1"
rankprofile[].fef.property[].value "tensor(out[9])"
rankprofile[].fef.property[].name "vespa.type.query.W_1"
rankprofile[].fef.property[].value "tensor(hidden[9],out[9])"
rankprofile[].fef.property[].name "vespa.type.query.W_0"
rankprofile[].fef.property[].value "tensor(hidden[9],x[9])"
rankprofile[].name "neuralNetworkProfile"
rankprofile[].fef.property[].name "rankingExpression(log10_1p).rankingScript"
rankprofile[].fef.property[].value "log10(x + 1)"
rankprofile[].fef.property[].name "rankingExpression(textScoreToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(normalizedTextScore)) == 1, 0, attribute(normalizedTextScore))"
rankprofile[].fef.property[].name "rankingExpression(ericScoreToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(ericScore)) == 1, 0, attribute(ericScore))"
rankprofile[].fef.property[].name "rankingExpression(replyCountToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(replyCount)) == 1, 0, if (attribute(replyCount) < 0, 0, attribute(replyCount)))"
rankprofile[].fef.property[].name "rankingExpression(uniqueReplyCountToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(uniqueReplyAuthorCount)) == 1, 0, if (attribute(uniqueReplyAuthorCount) < 0, 0, attribute(uniqueReplyAuthorCount)))"
rankprofile[].fef.property[].name "rankingExpression(upVoteCountToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(upVoteCount)) == 1, 0, if (attribute(upVoteCount) < 0, 0, attribute(upVoteCount)))"
rankprofile[].fef.property[].name "rankingExpression(downVoteCountToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(downVoteCount)) == 1, 0, if (attribute(downVoteCount) < 0, 0, attribute(downVoteCount)))"
rankprofile[].fef.property[].name "rankingExpression(abuseVoteCountToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(abuseVoteCount)) == 1, 0, if (attribute(abuseVoteCount) < 0, 0, attribute(abuseVoteCount)))"
rankprofile[].fef.property[].name "rankingExpression(totalPositiveReactions).rankingScript"
rankprofile[].fef.property[].value "rankingExpression(uniqueReplyCountToUse) + query(voteToReplyRatio) * (rankingExpression(upVoteCountToUse) - rankingExpression(downVoteCountToUse)) - rankingExpression(abuseVoteCountToUse)"
rankprofile[].fef.property[].name "rankingExpression(totalvote).rankingScript"
rankprofile[].fef.property[].value "query(reportabuseweight) * rankingExpression(abuseVoteCountToUse) + rankingExpression(downVoteCountToUse) + query(replyweight) * rankingExpression(uniqueReplyCountToUse) + rankingExpression(upVoteCountToUse)"
rankprofile[].fef.property[].name "rankingExpression(phat).rankingScript"
rankprofile[].fef.property[].value "if (rankingExpression(totalvote) == 0, 0, (query(replyweight) * rankingExpression(uniqueReplyCountToUse) + rankingExpression(upVoteCountToUse)) / rankingExpression(totalvote))"
rankprofile[].fef.property[].name "rankingExpression(newCommunityScoreToUse).rankingScript"
rankprofile[].fef.property[].value "if (rankingExpression(totalPositiveReactions) > 0, log10(rankingExpression(totalPositiveReactions)), 0)"
rankprofile[].fef.property[].name "rankingExpression(hsScoreToUse).rankingScript"
rankprofile[].fef.property[].value "attribute(hsScore)"
rankprofile[].fef.property[].name "rankingExpression(toxicityScoreToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(toxicity)) == 1, 0.6, attribute(toxicity))"
rankprofile[].fef.property[].name "rankingExpression(relevanceScoreToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(relevance)) == 1, 0.254, attribute(relevance))"
rankprofile[].fef.property[].name "rankingExpression(freshnessToUse).rankingScript"
rankprofile[].fef.property[].value "if (freshness(createdAt).logscale < 0.01, 0.01, freshness(createdAt).logscale)"
rankprofile[].fef.property[].name "rankingExpression(rankedAt).rankingScript"
rankprofile[].fef.property[].value "now"
rankprofile[].fef.property[].name "rankingExpression(createdAtToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(createdAt)) == 1, rankingExpression(rankedAt), attribute(createdAt))"
rankprofile[].fef.property[].name "rankingExpression(lastActivityAtToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(lastActivityAt)) == 1, attribute(createdAt), attribute(lastActivityAt))"
rankprofile[].fef.property[].name "rankingExpression(markedAsAbuseAtToUse).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(markedAsAbuseAt)) == 1, 9.223372036854776E18, attribute(markedAsAbuseAt))"
rankprofile[].fef.property[].name "rankingExpression(timeDecayToUse).rankingScript"
rankprofile[].fef.property[].value "pow(2,0 - ((rankingExpression(rankedAt) - rankingExpression(createdAtToUse)) / query(decay)))"
rankprofile[].fef.property[].name "rankingExpression(commentOverallScore).rankingScript"
rankprofile[].fef.property[].value "query(textweight) * rankingExpression(textScoreToUse) + query(communityweight) * rankingExpression(newCommunityScoreToUse)"
rankprofile[].fef.property[].name "rankingExpression(pinScore).rankingScript"
rankprofile[].fef.property[].value "if (isNan(attribute(pinned)) == 1, 0, query(pinweight) * attribute(pinned))"
rankprofile[].fef.property[].name "rankingExpression(freshnessRank).rankingScript"
rankprofile[].fef.property[].value "nativeRank + freshness(createdAt)"
rankprofile[].fef.property[].name "rankingExpression(log10_1p@3026397260d79ea5).rankingScript"
rankprofile[].fef.property[].value "log10(rankingExpression(abuseVoteCountToUse) + 1)"
rankprofile[].fef.property[].name "rankingExpression(log10_1p@cbfd3832d2a4debb).rankingScript"
rankprofile[].fef.property[].value "log10(rankingExpression(downVoteCountToUse) + 1)"
rankprofile[].fef.property[].name "rankingExpression(log10_1p@45db2b8984b54954).rankingScript"
rankprofile[].fef.property[].value "log10(rankingExpression(uniqueReplyCountToUse) + 1)"
rankprofile[].fef.property[].name "rankingExpression(log10_1p@10291c26fc51027b).rankingScript"
rankprofile[].fef.property[].value "log10(rankingExpression(upVoteCountToUse) + 1)"
rankprofile[].fef.property[].name "rankingExpression(log10_1p@d7da61ad34902e89).rankingScript"
rankprofile[].fef.property[].value "log10(rankingExpression(totalvote) + 1)"
rankprofile[].fef.property[].name "rankingExpression(nn_input).rankingScript"
rankprofile[].fef.property[].value "concat(rankingExpression(log10_1p@3026397260d79ea5), concat(rankingExpression(log10_1p@cbfd3832d2a4debb), concat(rankingExpression(log10_1p@45db2b8984b54954), concat(rankingExpression(log10_1p@10291c26fc51027b), concat(rankingExpression(phat), concat(rankingExpression(log10_1p@d7da61ad34902e89), concat(rankingExpression(hsScoreToUse), concat(rankingExpression(timeDecayToUse), rankingExpression(toxicityScoreToUse), x), x), x), x), x), x), x), x)"
rankprofile[].fef.property[].name "rankingExpression(nn_input).type"
rankprofile[].fef.property[].value "tensor(x[9])"
rankprofile[].fef.property[].name "rankingExpression(get_model_weights).rankingScript"
rankprofile[].fef.property[].value "if (query(field) == 0, constant(field), query(field))"
rankprofile[].fef.property[].name "rankingExpression(get_model_weights@1f2b4afc2c45fbee).rankingScript"
rankprofile[].fef.property[].value "if (query(W_0) == 0, constant(W_0), query(W_0))"
rankprofile[].fef.property[].name "rankingExpression(get_model_weights@e752cecc7900ff3e).rankingScript"
rankprofile[].fef.property[].value "if (query(b_0) == 0, constant(b_0), query(b_0))"
rankprofile[].fef.property[].name "rankingExpression(layer_0).rankingScript"
rankprofile[].fef.property[].value "elu(join(reduce(join(rankingExpression(nn_input), rankingExpression(get_model_weights@1f2b4afc2c45fbee), f(a,b)(a * b)), sum, x), rankingExpression(get_model_weights@e752cecc7900ff3e), f(a,b)(a + b)))"
rankprofile[].fef.property[].name "rankingExpression(layer_0).type"
rankprofile[].fef.property[].value "tensor(hidden[9])"
rankprofile[].fef.property[].name "rankingExpression(get_model_weights@eac265fa16b752cf).rankingScript"
rankprofile[].fef.property[].value "if (query(W_1) == 0, constant(W_1), query(W_1))"
rankprofile[].fef.property[].name "rankingExpression(get_model_weights@b953c19adb7d2154).rankingScript"
rankprofile[].fef.property[].value "if (query(b_1) == 0, constant(b_1), query(b_1))"
rankprofile[].fef.property[].name "rankingExpression(layer_1).rankingScript"
rankprofile[].fef.property[].value "elu(join(reduce(join(rankingExpression(layer_0), rankingExpression(get_model_weights@eac265fa16b752cf), f(a,b)(a * b)), sum, hidden), rankingExpression(get_model_weights@b953c19adb7d2154), f(a,b)(a + b)))"
rankprofile[].fef.property[].name "rankingExpression(layer_1).type"
rankprofile[].fef.property[].value "tensor(out[9])"
rankprofile[].fef.property[].name "rankingExpression(get_model_weights@418462473aa32b7d).rankingScript"
rankprofile[].fef.property[].value "if (query(W_out) == 0, constant(W_out), query(W_out))"
rankprofile[].fef.property[].name "rankingExpression(get_model_weights@23f46853cab72961).rankingScript"
rankprofile[].fef.property[].value "if (query(b_out) == 0, constant(b_out), query(b_out))"
rankprofile[].fef.property[].name "rankingExpression(layer_out).rankingScript"
rankprofile[].fef.property[].value "reduce(join(reduce(join(rankingExpression(layer_1), rankingExpression(get_model_weights@418462473aa32b7d), f(a,b)(a * b)), sum, out), rankingExpression(get_model_weights@23f46853cab72961), f(a,b)(a + b)), sum)"
rankprofile[].fef.property[].name "vespa.rank.firstphase"
rankprofile[].fef.property[].value "rankingExpression(freshnessRank)"
rankprofile[].fef.property[].name "vespa.rank.secondphase"
rankprofile[].fef.property[].value "rankingExpression(layer_out)"
rankprofile[].fef.property[].name "vespa.hitcollector.heapsize"
rankprofile[].fef.property[].value "2000"
rankprofile[].fef.property[].name "vespa.type.query.b_out"
rankprofile[].fef.property[].value "tensor(out[1])"
rankprofile[].fef.property[].name "vespa.type.query.W_out"
rankprofile[].fef.property[].value "tensor(out[9])"
rankprofile[].fef.property[].name "vespa.type.query.b_0"
rankprofile[].fef.property[].value "tensor(hidden[9])"
rankprofile[].fef.property[].name "vespa.type.query.b_1"
rankprofile[].fef.property[].value "tensor(out[9])"
rankprofile[].fef.property[].name "vespa.type.query.W_1"
rankprofile[].fef.property[].value "tensor(hidden[9],out[9])"
rankprofile[].fef.property[].name "vespa.type.query.W_0"
rankprofile[].fef.property[].value "tensor(hidden[9],x[9])"
