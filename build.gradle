/*
 * This file was generated by the Gradle 'init' task.
 */

buildscript {
  repositories {
	maven {
            url uri('javacc-gradle-plugin')
        }
        mavenLocal()
        maven {
            url = 'http://repo.maven.apache.org/maven2'
        }

        maven {
            url = 'https://yahoo.bintray.com/maven'
        }

        maven {
            url = 'https://repository.apache.org/content/groups/public'
        }
    }

  dependencies {
    classpath 'com.yahoo.vespa:configgen:7.28.21'
        classpath group: 'vespa.ca.coglinc',
                  name: 'javacc-gradle-plugin',
                  version: '3.0.2'
  }
}

allprojects {
    group = 'com.yahoo.vespa'
    version = '7.28.21'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'war'
    apply plugin: 'ca.coglinc.javacc'

    repositories {
        mavenLocal()
        maven {
            url = 'http://repo.maven.apache.org/maven2'
        }

        maven {
            url = 'https://yahoo.bintray.com/maven'
        }

        maven {
            url = 'https://repository.apache.org/content/groups/public'
        }
    }

    dependencies {
	javacc 'com.helger:parser-generator-cc:1.1.1'
    }

    sourceCompatibility = JavaVersion.VERSION_11

    publishing {
        publications {
            maven(MavenPublication) {
                from(components.java)
            }
        }
    }

    sourceSets {
      main{
        java {
           srcDir "${buildDir}/generated-sources/configgen/"
           srcDir "${buildDir}/generated-sources/configgen-default/"
           srcDir "${buildDir}/generated/javacc/"
        }
      }
      test {
	java {
           srcDir "${buildDir}/generated-sources/configgen-test/"
           srcDir "${buildDir}/generated-sources/configgen-default-test/"
	}
      }
    }

    compileJava.dependsOn generateConfigurationsTask(
	"${projectDir}/src/main/resources/configdefinitions", 
	"${buildDir}/generated-sources/configgen-default/")

    compileTestJava.dependsOn generateConfigurationsTask(
        "${projectDir}/src/test/resources/configdefinitions",
        "${buildDir}/generated-sources/configgen-default-test/")

    compileJava.dependsOn compileJavacc
}

ext {

}

def generateConfigurationsTask(source, dest) { 
  def randomTask = "configgen_" + 
	source.replaceAll("[^A-Za-z0-9]", "") + 
	"_" + new Random().nextInt(1000000000)

  return tasks.create(randomTask) {
    logger.info("Creating codegen task for " + source)
    doLast {
      logger.info("Executing codegen task for " + source)
      if( !new File("${dest}").exists() ) {
        new File("${dest}").mkdirs() 
        FileTree tree = fileTree("${source}").include('**/*.def')
          tree.each {File file ->
            codegenSpec("${dest}", "${file}")
          }
      }
    }
  }
}

def codegenSpec(dest, spec) {
    return tasks.create("${spec}".replaceAll("[^A-Za-z0-9]", "")) {
      if( !new File("${dest}").exists() ) {
        new File("${dest}").mkdirs()
      }

      javaexec {
        workingDir = file(buildDir)
        outputs.dir "${dest}"

        classpath = buildscript.configurations.classpath
        main = "com.yahoo.config.codegen.MakeConfig"
        jvmArgs = [ "-Dconfig.dest=${dest}", "-Dconfig.spec=${spec}" ]
      }
    }
}

def executeCodegen(dest, spec) {
      if( !new File(dest).exists() ) {
        println "creating " + dest 
        new File(dest).mkdirs()
      }
	println "executing " + spec +" , " + dest

      javaexec {
        workingDir = file(buildDir)

        classpath = buildscript.configurations.classpath
        main = "com.yahoo.config.codegen.MakeConfig"
        jvmArgs = [ "-Dconfig.dest=" + dest, "-Dconfig.spec=" + spec ]
      }
}
