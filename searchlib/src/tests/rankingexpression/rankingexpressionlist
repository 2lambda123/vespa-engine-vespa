# This file is a list of semicolon separated strings. The first string is the expression to be parsed, whereas all
# following strings are allowed ways to print the parsed expression. If no alternatives are given, the expression can be
# printed as the original. Note that all strings are trimmed before they are parsed / compared.
  1; 1.0
1.0; 1.0; 1
1e1; 1e1; 10; 10.0
1e-1; 1e-1; 0.1
1.0e1; 1.0e1; 10; 10.0
1.0e-1; 1.0e-1; 0.1
-1; -1; -1.0
1 + -1; 1 + -1; 1 - 1; 1.0 + -1.0
-1 + 1; -1 + 1; -1.0 + 1.0
tan(10); tan(10.0)
1; 1.0
 1; 1.0
 1 + 2; 1.0 + 2.0
 1 - 2; 1.0 - 2.0
 1 * 2; 1.0 * 2.0
 1 / 2; 1.0 / 2.0
 1 + 2 - 3; 1.0 + 2.0 - 3.0
 1 + 2 - 3 * 4; 1.0 + 2.0 - 3.0 * 4.0
 1 + 2 - 3 * 4 / 5; 1.0 + 2.0 - 3.0 * 4.0 / 5.0
1+2-3*4/5; 1 + 2 - 3 * 4 / 5; 1.0 + 2.0 - 3.0 * 4.0 / 5.0
(1); (1.0)
(1)+ 2; (1) + 2; (1.0) + 2.0
(1)+(2); (1) + (2); (1.0) + (2.0)
(1)+(2)-3; (1) + (2) - 3; (1.0) + (2.0) - 3.0
(1)+(2)-(3); (1) + (2) - (3); (1.0) + (2.0) - (3.0)
(1)+(2)-(3)*4; (1) + (2) - (3) * 4; (1.0) + (2.0) - (3.0) * 4.0
(1)+(2)-(3)*(4); (1) + (2) - (3) * (4); (1.0) + (2.0) - (3.0) * (4.0)
(1)+(2)-(3)*(4)/5; (1) + (2) - (3) * (4) / 5; (1.0) + (2.0) - (3.0) * (4.0) / 5.0
(1)+(2)-(3)*(4)/(5); (1) + (2) - (3) * (4) / (5); (1.0) + (2.0) - (3.0) * (4.0) / (5.0)
 1 +(2)-(3)*(4)/(5); 1 + (2) - (3) * (4) / (5); 1.0 + (2.0) - (3.0) * (4.0) / (5.0)
 1 + 2 -(3)*(4)/(5); 1 + 2 - (3) * (4) / (5); 1.0 + 2.0 - (3.0) * (4.0) / (5.0)
 1 + 2 - 3 *(4)/(5); 1 + 2 - 3 * (4) / (5); 1.0 + 2.0 - 3.0 * (4.0) / (5.0)
 1 + 2 - 3 * 4 /(5); 1 + 2 - 3 * 4 / (5); 1.0 + 2.0 - 3.0 * 4.0 / (5.0)
 1 + 2 - 3 * 4 / 5 ; 1 + 2 - 3 * 4 / 5; 1.0 + 2.0 - 3.0 * 4.0 / 5.0
(1 + 2); (1.0 + 2.0)
(1 + 2)- 3; (1 + 2) - 3; (1.0 + 2.0) - 3.0
(1 + 2 - 3); (1.0 + 2.0 - 3.0)
(1 + 2 - 3)* 4; (1.0 + 2.0 - 3.0) * 4.0
(1 + 2 - 3 * 4); (1.0 + 2.0 - 3.0 * 4.0)
(1 + 2 - 3 * 4)/ 5; (1 + 2 - 3 * 4) / 5; (1.0 + 2.0 - 3.0 * 4.0) / 5.0
(1 + 2 - 3 * 4 / 5); (1.0 + 2.0 - 3.0 * 4.0 / 5.0)
 1 +(2 - 3 * 4 / 5); 1 + (2 - 3 * 4 / 5); 1.0 + (2.0 - 3.0 * 4.0 / 5.0)
 1 + 2 -(3 * 4 / 5); 1 + 2 - (3 * 4 / 5); 1.0 + 2.0 - (3.0 * 4.0 / 5.0)
 1 + 2 - 3 *(4 / 5); 1 + 2 - 3 * (4 / 5); 1.0 + 2.0 - 3.0 * (4.0 / 5.0)
1+2-3*(4/5); 1 + 2 - 3 * (4 / 5); 1.0 + 2.0 - 3.0 * (4.0 / 5.0)
log(1); log(1.0)
log( 1 ); log(1); log(1.0)
log( 1 + 2 ); log(1 + 2); log(1.0 + 2.0)
log( 1 + 2 - 3 ); log(1 + 2 - 3); log(1.0 + 2.0 - 3.0)
log( 1 + 2 - 3 * 4 ); log(1 + 2 - 3 * 4); log(1.0 + 2.0 - 3.0 * 4.0)
log( 1 + 2 - 3 * 4 / 5 ); log(1 + 2 - 3 * 4 / 5); log(1.0 + 2.0 - 3.0 * 4.0 / 5.0)
log((1 + 2)- 3 * 4 / 5 ); log((1 + 2) - 3 * 4 / 5); log((1.0 + 2.0) - 3.0 * 4.0 / 5.0)
log( 1 +(2 - 3)* 4 / 5 ); log(1 + (2 - 3) * 4 / 5); log(1.0 + (2.0 - 3.0) * 4.0 / 5.0)
log( 1 + 2 -(3 * 4)/ 5 ); log(1 + 2 - (3 * 4) / 5); log(1.0 + 2.0 - (3.0 * 4.0) / 5.0)
log( 1 + 2 - 3 *(4 / 5)); log(1 + 2 - 3 * (4 / 5)); log(1.0 + 2.0 - 3.0 * (4.0 / 5.0))
log(1+2-3*4/5); log(1 + 2 - 3 * 4 / 5); log(1.0 + 2.0 - 3.0 * 4.0 / 5.0)
""; ""
"foo"
"foo\""
(1+"foo"); (1 + "foo"); (1.0 + "foo")
if("foo" == "bar", 1, 2); if ("foo" == "bar", 1, 2); if ("foo" == "bar", 1.0, 2.0)
cosh(1); cosh(1); cosh(1.0)
cosh (1); cosh(1); cosh(1.0)
cosh ( 1 ); cosh(1); cosh(1.0)
cosh ( foo ); cosh(foo)
cosh ( foo.out ); cosh(foo.out)
cosh ( foo ( bar ) . out ); cosh(foo(bar).out)
sin(10); sin(10.0)
cos(10); cos(10.0)
tan(10); tan(10.0)
acos(10); acos(10.0)
asin(10); asin(10.0)
atan(10); atan(10.0)
cosh(10); cosh(10.0)
sinh(10); sinh(10.0)
tanh(10); tanh(10.0)
exp(10); exp(10.0)
log(10); log(10.0)
log10(10); log10(10.0)
sqrt(10); sqrt(10.0)
ceil(10); ceil(10.0)
fabs(10); fabs(10.0)
floor(10); floor(10.0)
relu(10); relu(10.0)
sigmoid(10); sigmoid(10.0)
atan2(10, 20); atan2(10,20); atan2(10.0,20.0)
hamming(42, -16); hamming(42,-16); hamming(42.0,-16.0)
ldexp(10, 20); ldexp(10,20); ldexp(10.0,20.0)
pow(10, 20); pow(10,20); pow(10.0,20.0)
fmod(10, 20); fmod(10,20); fmod(10.0,20.0)
min(0, 1); min(0,1); min(0.0,1.0)
max(1, 0); max(1,0); max(1.0,0.0)
if(1<2,3,4); if (1 < 2, 3, 4); if (1.0 < 2.0, 3.0, 4.0)
if(1>2,3,4); if (1 > 2, 3, 4);  if (1.0 > 2.0, 3.0, 4.0)
if(1==2,3,4); if (1 == 2, 3, 4); if (1.0 == 2.0, 3.0, 4.0)
if(1~=2,3,4); if (1 ~= 2, 3, 4); if (1.0 ~= 2.0, 3.0, 4.0)
if(1<=2,3,4); if (1 <= 2, 3, 4); if (1.0 <= 2.0, 3.0, 4.0)
if(1>=2,3,4); if (1 >= 2, 3, 4); if (1.0 >= 2.0, 3.0, 4.0)
if(1>=2,3,4,0.3); if (1 >= 2, 3, 4, 0.3); if (1.0 >= 2.0, 3.0, 4.0, 0.3)
if(1>=2,3,4,0.5); if (1 >= 2, 3, 4, 0.5); if (1.0 >= 2.0, 3.0, 4.0, 0.5)
if (1   <   2,   3,   4); if (1 < 2, 3, 4); if (1.0 < 2.0, 3.0, 4.0)
if (1+2 <   3,   4,   5); if (1 + 2 < 3, 4, 5); if (1.0 + 2.0 < 3.0, 4.0, 5.0)
if (1   < 2+3,   4,   5); if (1 < 2 + 3, 4, 5); if (1.0 < 2.0 + 3.0, 4.0, 5.0)
if (1   <   2, 3+4,   5); if (1 < 2, 3 + 4, 5); if (1.0 < 2.0, 3.0 + 4.0, 5.0)
if (1   <   2,   3, 4+5); if (1 < 2, 3, 4 + 5); if (1.0 < 2.0, 3.0, 4.0 + 5.0)
if (foo in [bar], 6, 9); if (foo in [bar], 6, 9); if (foo in [bar], 6.0, 9.0)
if (foo in [bar,baz], 6, 9); if (foo in [bar, baz], 6, 9); if (foo in [bar, baz], 6.0, 9.0)
if (foo in [bar,baz,cox], 6, 9); if (foo in [bar, baz, cox], 6, 9); if (foo in [bar, baz, cox], 6.0, 9.0)
if (foo in [bar], 6, 9); if (foo in [bar], 6.0, 9.0)
if (foo in [bar, baz], 6, 9); if (foo in [bar, baz], 6.0, 9.0)
if (foo in [bar, baz, cox], 6, 9); if (foo in [bar, baz, cox], 6.0, 9.0)
if (foo in [ bar ], 6, 9); if (foo in [bar], 6, 9); if (foo in [bar], 6.0, 9.0)
if (foo in [ bar,  baz ], 6, 9); if (foo in [bar, baz], 6, 9); if (foo in [bar, baz], 6.0, 9.0)
if (foo in [ bar,  baz,  cox ], 6, 9); if (foo in [bar, baz, cox], 6, 9); if (foo in [bar, baz, cox], 6.0, 9.0)
feature;                                    feature
fe@ture;                                    fe@ture
featur@;                                    featur@
fe$ture;                                    fe$ture
featur$;                                    featur$
feature.out;                                feature.out
feature .out;                               feature.out
feature . out;                              feature.out
feature.out.out;                            feature.out.out
feature.if
feature.in
feature(arg1);                              feature(arg1)
feature (arg1);                             feature(arg1)
feature ( arg1);                            feature(arg1)
feature ( arg1 );                           feature(arg1)
feature(arg1,arg2);                         feature(arg1,arg2)
feature(arg1 ,arg2);                        feature(arg1,arg2)
feature(arg1 , arg2);                       feature(arg1,arg2)
feature(arg1 , arg2).out;                   feature(arg1,arg2).out
feature(arg1 , arg2) .  out;                feature(arg1,arg2).out
feature("\",difficult","\")arguments\\").out
feature(arg1,arg2).out;                     feature(arg1,arg2).out
feature(if)
feature(in)
feature(cos)
feature("cos(1,2)")
feature(cos,sin,tan,cosh,sinh,tanh,acos,asin,atan,exp,log10,log,sqrt,ceil,fabs,floor)
feature(cos,"sin(1,2)",3); feature(cos,"sin(1,2)",3.0)
rankingExpression(foo@92c9e83e1b665d2c.fe5dbbcea5ce7e29).rankingScript
rankingExpression(foo@92c9e83e1b665d2c.2e5dbbcea5ce7e29).rankingScript
mysum ( mysum(4,  4), value( 4 ), value(4) ); mysum(mysum(4,4),value(4),value(4)); mysum(mysum(4.0,4.0),value(4.0),value(4.0))
"\\"
"\""
"\f"
"\female"
"\n"
"\nude"
"\r"
"fa\rt"
"\t"
"fe\tish"
"\x10081977"; "x10081977"
"\\x10081977"
"10\x081977"; "10x081977"
"1008\x1977"; "1008x1977"
"100819\x77"; "100819x77"
if(1.09999~=1.1,2,3); if (1.09999 ~= 1.1, 2, 3); if (1.09999 ~= 1.1, 2.0, 3.0)
10 % 3; 10.0 % 3.0
1 && 0 || 1; 1.0 && 0.0 || 1.0
!a && (a || a)
10 ^ 3; 10.0 ^ 3.0
